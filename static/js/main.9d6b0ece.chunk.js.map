{"version":3,"sources":["redux.js","components/AddTodo.js","components/ListTodo.js","App.js","serviceWorker.js","index.js"],"names":["initialState","todos","id","uuid","name","complete","store","createStore","state","_ref","type","payload","Object","objectSpread","concat","toConsumableArray","map","todo","filter","window","__REDUX_DEVTOOLS_EXTENSION__","connect","addTodoAction","props","_useState","useState","_useState2","slicedToArray","status","setStatus","_useState3","_useState4","setTodo","cancelTodo","body","react_default","a","createElement","Col_default","sm","span","offset","Button_default","variant","className","onClick","onSubmit","event","preventDefault","completed","Row_default","md","FormControl_default","value","onChange","e","target","Container_default","toggleTodoAction","todoId","deleteTodoAction","toggleTodo","selectedTodo","setSelectedTodo","show","setShow","handleClose","handleShow","length","key","bind","Modal_default","onHide","Header","closeButton","Title","Body","Footer","App","es","components_AddTodo","components_ListTodo","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAGMA,EAAe,CACjBC,MAAO,CACH,CACIC,GAAIC,MACJC,KAAM,aACNC,UAAU,GAEd,CACIH,GAAIC,MACJC,KAAM,gBACNC,UAAU,KAKTC,EAAQC,YAMrB,SAAiBC,EAAjBC,GAAyC,IAAhBC,EAAgBD,EAAhBC,KAAMC,EAAUF,EAAVE,QAC3B,OAAOD,GACH,IAAK,WACD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GACAJ,EADP,CAEIP,MAAK,GAAAa,OAAAF,OAAAG,EAAA,EAAAH,CAAMJ,EAAMP,OAAZ,CAAmBU,MAEhC,IAAK,cACD,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAJ,EADP,CAEIP,MAAOO,EAAMP,MAAMe,IAAI,SAAAC,GAAI,OAAKA,EAAKf,KAAOS,EAAbC,OAAAC,EAAA,EAAAD,CAAA,GAA4BK,EAA5B,CAAkCZ,UAAWY,EAAKZ,WAAYY,MAErG,IAAK,cACD,OAAOL,OAAAC,EAAA,EAAAD,CAAA,GACAJ,EADP,CAEIP,MAAOO,EAAMP,MAAMiB,OAAO,SAAAD,GAAI,OAAIA,EAAKf,KAAOS,MAEtD,QACI,OAAOH,IAtBfR,EACAmB,OAAOC,8BAAgCD,OAAOC,gCAyB3C,ICaQC,cAJS,SAACb,GAAD,MAAY,CAChCP,MAAOO,EAAMP,QAKb,CAAEqB,cDfuB,SAACL,GAAD,MAAW,CACpCP,KAAM,WACNC,QAASM,KCWEI,CAjDC,SAACE,GAAU,IAAAC,EACKC,oBAAS,GADdC,EAAAd,OAAAe,EAAA,EAAAf,CAAAY,EAAA,GAChBI,EADgBF,EAAA,GACRG,EADQH,EAAA,GAAAI,EAECL,mBAAS,IAFVM,EAAAnB,OAAAe,EAAA,EAAAf,CAAAkB,EAAA,GAEhBb,EAFgBc,EAAA,GAEVC,EAFUD,EAAA,GAKjBE,EAAa,kBAAMJ,GAAU,IAc/BK,EAAOC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAKG,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACnCN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAQO,QAAQ,UAAUC,UAAU,QAAQC,QAAS,kBAhB9BhB,GAAU,KAgBjC,aAcJ,OAZGD,IACCM,EAAOC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACHD,EAAAC,EAAAC,cAAA,QAAMO,UAAU,QAAQE,SAfb,SAACC,GAChBA,EAAMC,iBACNzB,EAAMD,cAAc,CAChBpB,GAAIC,MACJC,KAAMa,EACNgC,WAAW,IAEfjB,EAAQ,IACRC,MAQQE,EAAAC,EAAAC,cAACa,EAAAd,EAAD,KACID,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAKe,GAAG,KAAIhB,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CAAaiB,MAAOpC,EAAMqC,SApBjC,SAAAC,GACjBvB,EAAQuB,EAAEC,OAAOH,WAoBLlB,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAKe,GAAG,QAAOhB,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAQO,QAAQ,UAAUjC,KAAK,UAA/B,WACfyB,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAKe,GAAG,QAAOhB,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAQO,QAAQ,SAASjC,KAAK,SAASmC,QAAS,kBAAMZ,MAAtD,eAO3BE,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,KACID,EAAAC,EAAAC,cAACa,EAAAd,EAAD,KACID,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAKG,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IACvBP,wBCgBNb,cAJS,SAACb,GAAD,MAAY,CAChCP,MAAOO,EAAMP,QAKb,CAAEyD,iBFf0B,SAAAC,GAAM,MAAK,CACvCjD,KAAM,cACNC,QAASgD,IEaWC,iBFVQ,SAAAD,GAAM,MAAK,CACvCjD,KAAM,cACNC,QAASgD,KEMEtC,CA1DE,SAACE,GAAU,IAChBtB,EAAUsB,EAAVtB,MACF4D,EAAa,SAACF,GAAD,OAAYpC,EAAMmC,iBAAiBC,IAF9BnC,EAQgBC,mBAAS,MARzBC,EAAAd,OAAAe,EAAA,EAAAf,CAAAY,EAAA,GAQjBsC,EARiBpC,EAAA,GAQHqC,EARGrC,EAAA,GAAAI,EASAL,oBAAS,GATTM,EAAAnB,OAAAe,EAAA,EAAAf,CAAAkB,EAAA,GASjBkC,EATiBjC,EAAA,GASXkC,EATWlC,EAAA,GAWlBmC,EAAc,kBAAMD,GAAQ,IAC5BE,EAAa,SAAClD,GAChBgD,GAAQ,GACRF,EAAgB9C,IAGpB,OACIkB,EAAAC,EAAAC,cAAA,WACKpC,EAAMmE,OACHjC,EAAAC,EAAAC,cAAA,MAAIO,UAAU,cAEN3C,EAAMe,IAAI,SAAAC,GAAI,OACVkB,EAAAC,EAAAC,cAAA,MAAIO,UAAU,kBAAkByB,IAAKpD,EAAKf,IACtCiC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,YAAYC,QAASgB,EAAWS,KAAK,KAAKrD,EAAKf,KACxDe,EAAKZ,SAAY,eAAO,eAD9B,OAEI8B,EAAAC,EAAAC,cAAA,QAAMO,UAAW3B,EAAKZ,SAAW,WAAa,MAAOY,EAAKb,OAE9D+B,EAAAC,EAAAC,cAAA,UAAQ3B,KAAK,SAASmC,QAASsB,EAAWG,KAAK,KAAMrD,GAAO2B,UAAU,8BAAtE,cAKdT,EAAAC,EAAAC,cAAA,oCAGNF,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,CAAO4B,KAAMA,EAAMQ,OAAQN,GACvB/B,EAAAC,EAAAC,cAACkC,EAAAnC,EAAMqC,OAAP,CAAcC,aAAW,GACrBvC,EAAAC,EAAAC,cAACkC,EAAAnC,EAAMuC,MAAP,iBAEJxC,EAAAC,EAAAC,cAACkC,EAAAnC,EAAMwC,KAAP,gDACAzC,EAAAC,EAAAC,cAACkC,EAAAnC,EAAMyC,OAAP,KACI1C,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAQO,QAAQ,YAAYE,QAASqB,GAArC,SAGCJ,GAAgB3B,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAQO,QAAQ,UAAUE,QA1CxC,SAACc,GAChBpC,EAAMqC,iBAAiBD,GACvBM,GAAQ,IAwCmEK,KAAK,KAAMR,EAAa5D,KAAtE,4BC5BtB4E,MAff,WACE,OACE3C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAUzE,MAAOA,GACf6B,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACXT,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,KACED,EAAAC,EAAAC,cAAA,MAAIO,UAAU,uBAAd,YACAT,EAAAC,EAAAC,cAAC2C,EAAD,MACA7C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4C,EAAD,0BCJQC,QACW,cAA7B/D,OAAOgE,SAASC,UAEe,UAA7BjE,OAAOgE,SAASC,UAEhBjE,OAAOgE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9d6b0ece.chunk.js","sourcesContent":["import {createStore} from 'redux';\nimport uuid from 'uuid/v4';\n\nconst initialState = {\n    todos: [\n        {\n            id: uuid(),\n            name: 'Do Laundry',\n            complete: false\n        },\n        {\n            id: uuid(),\n            name: 'Get Groceries',\n            complete: true\n        }\n    ]\n}\n\nexport const store = createStore(\n    reducer,\n    initialState,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nfunction reducer(state, {type, payload}) {\n    switch(type) {\n        case 'ADD_TODO':\n            return {\n                ...state,\n                todos: [...state.todos, payload]\n            };\n        case 'TOGGLE_TODO':\n            return {\n                ...state,\n                todos: state.todos.map(todo => (todo.id === payload) ? {...todo, complete: !todo.complete} : todo)\n            }\n        case 'DELETE_TODO':\n            return {\n                ...state,\n                todos: state.todos.filter(todo => todo.id !== payload)\n            }\n        default:\n            return state;\n    }\n}\n\nexport const addTodoAction = (todo) => ({\n    type: 'ADD_TODO',\n    payload: todo\n});\n\nexport const toggleTodoAction = todoId => ({\n    type: 'TOGGLE_TODO',\n    payload: todoId\n});\n\nexport const deleteTodoAction = todoId => ({\n    type: 'DELETE_TODO',\n    payload: todoId\n})","import Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button'\nimport Container from 'react-bootstrap/Container'\nimport FormControl from 'react-bootstrap/FormControl'\nimport { connect } from 'react-redux';\nimport {addTodoAction} from '../redux';\nimport uuid from 'uuid/v4';\n\nconst AddTodo = (props) => {\n    const [status, setStatus] = useState(false);\n    const [todo, setTodo] = useState('');\n\n    const changeStatus = () => setStatus(true);\n    const cancelTodo = () => setStatus(false);\n    const handleChange = e => {\n        setTodo(e.target.value);\n    }\n    const submitTodo = (event) => {\n        event.preventDefault();\n        props.addTodoAction({\n            id: uuid(),\n            name: todo,\n            completed: false\n        });\n        setTodo('');\n        cancelTodo();\n    }\n    let body = <Col sm={{ span: 6, offset: 3 }}>\n        <Button variant=\"primary\" className=\"w-100\" onClick={() => changeStatus()}>Add Todo</Button>\n    </Col>;\n    if(status) {\n        body = <Col>\n            <form className=\"w-100\" onSubmit={submitTodo}>\n                <Row>\n                    <Col md=\"6\"><FormControl value={todo} onChange={handleChange}></FormControl></Col>\n                    <Col md=\"auto\"><Button variant=\"primary\" type=\"submit\">Submit</Button></Col>\n                    <Col md=\"auto\"><Button variant=\"danger\" type=\"submit\" onClick={() => cancelTodo()}>Cancel</Button></Col>\n                </Row>\n            </form>\n        </Col>\n    }\n\n    return (\n        <Container>\n            <Row>\n                <Col sm={{ span: 6, offset: 3 }}>\n                    {body}\n                </Col>\n            </Row>\n        </Container>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    todos: state.todos\n});\n\nexport default connect(\n    mapStateToProps,\n    { addTodoAction }\n)(AddTodo);","import React, {useState} from 'react';\nimport { connect } from 'react-redux';\nimport {toggleTodoAction, deleteTodoAction} from '../redux';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\nconst ListTodo = (props) => {\n    const { todos } = props;\n    const toggleTodo = (todoId) => props.toggleTodoAction(todoId);\n    const deleteTodo = (todoId) => {\n        props.deleteTodoAction(todoId);\n        setShow(false);\n    }\n\n    const [selectedTodo, setSelectedTodo] = useState(null);\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = (todo) => {\n        setShow(true);\n        setSelectedTodo(todo);\n    }\n\n    return (\n        <div>\n            {todos.length ?\n                <ul className=\"list-group\">\n                    {\n                        todos.map(todo => (\n                            <li className=\"list-group-item\" key={todo.id}>\n                                <div className=\"todo-text\" onClick={toggleTodo.bind(null,todo.id)}>\n                                    {(todo.complete) ? 'üëç' : 'üëå'}&nbsp;\n                                    <span className={todo.complete ? 'complete' : null}>{todo.name}</span>\n                                </div>\n                                <button type=\"button\" onClick={handleShow.bind(null, todo)} className=\"btn btn-danger float-right\">Delete</button>\n                            </li>\n                        ))\n                    }\n                </ul>\n                : <div>Add new in this list!</div>\n            }\n            \n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Confirm</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>Are you sure, want to remove this item?</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    {selectedTodo && <Button variant=\"primary\" onClick={deleteTodo.bind(null, selectedTodo.id)}>\n                        Save Changes\n                    </Button>}\n                </Modal.Footer>\n            </Modal>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => ({\n    todos: state.todos\n  });\n\nexport default connect(\n    mapStateToProps,\n    { toggleTodoAction, deleteTodoAction }\n)(ListTodo);","import React from 'react';\nimport Container from 'react-bootstrap/Container'\nimport AddTodo from './components/AddTodo';\nimport ListTodo from './components/ListTodo';\nimport { Provider } from 'react-redux';\nimport {store} from './redux';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n          <Container>\n            <h1 className=\"text-center heading\">Todo App</h1>\n            <AddTodo></AddTodo>\n            <hr/>\n            <ListTodo></ListTodo>\n          </Container>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './index.css';\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}